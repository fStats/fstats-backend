openapi: 3.1.0
info:
  title: fStats OpenAPI
  description: Official fStats API OpenAPI documentation
  version: v3
  contact:
    name: API Support on Discord
    url: https://discord.gg/pbwnMwnUD6
  license:
    name: MIT
servers:
  - url: "https://api.fstats.dev"
paths:
  /v3/auth/login:
    post:
      tags:
        - Authorization
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
        required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /v3/auth/registration:
    post:
      tags:
        - Authorization
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /v2/metrics:
    post:
      deprecated: true
      summary: "Upload new metric data to server"
      tags:
        - Metric
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetricsDeprecated"
        required: true
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /v3/metrics:
    post:
      summary: "Upload new metric data to server"
      tags:
        - Metric
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Metrics"
        required: true
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /v3/metrics/{id}/line:
    get:
      summary: "Get data in time-range for Timeline Chart"
      description: "Data is compressed using [delta compression](https://en.wikipedia.org/wiki/Delta_encoding)"
      tags:
        - Metric
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
        - name: "from"
          in: query
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: "to"
          in: query
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: "server_side"
          in: query
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LineMetric"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /v3/metrics/{id}/pie:
    get:
      summary: "Get last 30 minute data for Pie Chart"
      tags:
        - Metric
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
        - name: "server_side"
          in: query
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PieMetric"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /v3/projects:
    get:
      summary: "Get list of all exist projects"
      tags:
        - Project
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
    post:
      summary: "Create new project"
      security:
        - bearerAuth: [ ]
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
        required: true
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /v3/projects/{id}:
    get:
      summary: "Get specify project by ID"
      tags:
        - Project
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
    patch:
      summary: "Update project info"
      tags:
        - Project
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        204:
          description: "NoContent"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
    delete:
      summary: "Delete specify project"
      tags:
        - Project
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        204:
          description: "NoContent"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /v3/projects/{id}/favorite:
    post:
      summary: "Added project to user favorites"
      security:
        - bearerAuth: [ ]
      tags:
        - Favorite
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        204:
          description: "No Content"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
    delete:
      summary: "Remove project to user favorites"
      tags:
        - Favorite
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        204:
          description: "No Content"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /v3/users:
    patch:
      summary: "Update user data"
      security:
        - bearerAuth: [ ]
      tags:
        - User
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        204:
          description: "NoContent"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
    delete:
      summary: "Delete specify user from database with all project"
      security:
        - bearerAuth: [ ]
      tags:
        - User
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        204:
          description: "NoContent"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /v3/users/{id}:
    get:
      summary: "Get specify user by ID"
      tags:
        - User
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        204:
          description: "NoContent"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "BadRequest"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /v3/users/{id}/favorite:
    get:
      summary: "Get projects list that user marked as favorite"
      security:
        - bearerAuth: [ ]
      tags:
        - Favorite
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /v3/users/{id}/projects:
    get:
      summary: "Get projects list that user own"
      tags:
        - User
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Project:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        isHidden:
          type: boolean
          default: false
        hidingReason:
          type: [ string, "null" ]
        owner:
          $ref: "#/components/schemas/User"
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
    Message:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    PieMetric:
      type: object
      properties:
        metric_pie:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: integer
    LineMetric:
      type: object
      properties:
        timestamps:
          type: array
          items:
            type: integer
        counts:
          type: array
          items:
            type: integer
    MetricsDeprecated:
      type: object
      deprecated: true
      properties:
        projectIds:
          type: object
          additionalProperties:
            type: string
        metric:
          $ref: '#/components/schemas/MetricDeprecated'
    MetricDeprecated:
      type: object
      deprecated: true
      properties:
        timestampSeconds:
          type: integer
        projectId:
          type: integer
        minecraftVersion:
          type: string
        isOnlineMode:
          type: boolean
        modVersion:
          type: string
        os:
          type: string
          maxLength: 1
        location:
          type: string
        fabricApiVersion:
          type: string
    Metrics:
      type: object
      properties:
        projectIds:
          type: object
          additionalProperties:
            type: string
        metric:
          $ref: '#/components/schemas/Metric'
    Metric:
      type: object
      properties:
        timestampSeconds:
          type: integer
        projectId:
          type: integer
        minecraftVersion:
          type: string
        isOnlineMode:
          type: boolean
        modVersion:
          type: string
        os:
          type: string
          maxLength: 1
        location:
          type: string
        fabricApiVersion:
          type: [ string, "null" ]
        serverSide:
          type: boolean
